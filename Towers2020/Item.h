/**
 * \file Item.h
 *
 * \author Morgan Mundell
 * \author
 *
 *  Class that holds items
 */

#pragma once

#include <memory>
#include <vector>
#include <map>
#include <utility>
#include "ItemVisitor.h"
#include "XmlNode.h"

class CTowersGame;

/**
 * Base class for any item in the game
 */
class CItem
{
public:
	/** The grid spacing in the game */
	static const int GridSpacing = 16;

    ///  Default constructor (disabled)
    CItem() = delete;

    /** The directory were the images are stored */
    static const std::wstring ImagesDirectory;

    ///  Copy constructor (disabled)
    CItem(const CItem&) = delete;

    virtual ~CItem();

    /**  
     * The X location of the center of the tile
     * @returns X location in pixels 
     */
    double GetX() const { return mX; }

    /**  
     * The Y location of the center of the tile
     * @returns Y location in pixels 
     */
    double GetY() const { return mY; }

    /** 
     * Get the width of the image
     * @returns Image width
     */
    double GetWidth() const { return mItemImage->GetWidth(); }

    /**
     * Get the height of the image
     * @returns Image height
     */
    double GetHeight() const { return mItemImage->GetHeight(); }

    /**  
     * Set the item location
     * @param x X location
     * @param y Y location 
     */
    void SetLocation(double x, double y) { mX = x; mY = y; }

    void SetImage(const std::wstring& file);

    //virtual std::shared_ptr<xmlnode::CXmlNode> XmlSave(const std::shared_ptr<xmlnode::CXmlNode>& node); no save function

    virtual void XmlLoad(const std::shared_ptr<xmlnode::CXmlNode>& node);

    /**  Get the file name for this tile image
     * @returns Filename or blank if none 
     */
    std::wstring GetFile() { return mFile; }

    std::wstring GetDeclarationAttribute(const std::wstring id, const std::wstring& attribute);

    double Distance(std::shared_ptr<CItem> other);

    virtual bool HitTest(double x, double y);

    /**  Get the game this item is in
     * @returns TowersGame pointer
     */
    CTowersGame* GetGame() { return mTowersGame; }

    /**  
     * Get the ID of the image. Used for the XML Loading.
     * @returns TowersGame pointer 
     */
    std::wstring GetItemId() { return mItemId; }

    void CItem::QuantizeLocation();

    std::shared_ptr<CItem> GetAdjacent(int dx, int dy);

    /** 
     * Accept a visitor
     * @param visitor The visitor we accept 
     */
    virtual void Accept(CItemVisitor* visitor) = 0;

    virtual void Draw(Gdiplus::Graphics* graphics);

    /** 
     * Handle updates for animation
     * @param elapsed The time since last update 
     */
    virtual void Update(double elapsed) {}

    /**
     * Renders the entities generated by an attack of a tower
     * @param graphics The graphics object
     */
    virtual void RenderEntities(Gdiplus::Graphics* graphics) = 0;

protected:

    CItem(CTowersGame* game);

private:
    /// The game this item is contained in
    CTowersGame* mTowersGame;

    /// The file for this item
    std::wstring mFile;

    /// The image of this tile
    std::unique_ptr<Gdiplus::Bitmap> mItemImage;

    /// The id of this tile according to the XML Declarations section.
    std::wstring mItemId;

    /// X location for the center of the item
    double mX = 0; 

    /// Y location for the center of the item
    double mY = 0;     
};

